from typing import Protocol, Iterable, Any, Mapping, ContextManager

class DB(Protocol):
    def connect(self) -> None: ...
    def close(self) -> None: ...
    def execute(self, sql: str, params: tuple | Mapping | None = None) -> None: ...
    def executemany(self, sql: str, params_seq: Iterable[tuple]) -> None: ...
    def query(self, sql: str, params: tuple | Mapping | None = None) -> list[dict]: ...
    def transaction(self) -> ContextManager[None]: ...  # with db.transaction(): ...

    # опционально: контекстный менеджер для всего подключения
    def __enter__(self) -> "DB": ...
    def __exit__(self, exc_type, exc, tb) -> None: ...